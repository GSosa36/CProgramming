1. mkdir <directory_name> (make directory). Creates a folder.

2. cd <directory_name> (change directory). Changes the currect directory to the specified one.

3. code <file_name>. Creates a file and opens it in a text editor.

4. ls (list). Shows the content of the current directory.

5. pwd (print working directory). Shows the path of the current directory.

6. clear - clears the terminal

7. gcc <file_name (c source code)> - compile the program.

8. ./<executable_file> - runs the program.

9. \ - escape (character) - \n   \* escape sequence

* multilist comment      */

int main() {   }  - main function

<stdio.h> - header file

void - represents no data, same as putting nothing

printf( " Welcome to C!\n");  - format control string

\n creates a new line

\ is called escape character

%d used to print the value of a variable

variables use underscores

V int A5; is different from int a5;

write a C program that produce,  make int for this
Name: John Doe
Course ID: 2271 
Student ID: 10234
Student ID - Course ID is: 7963

sum = intereger1 + integer2; // assign total to sum

d stands for decimal for printf ("%d")

\n - escape sequence / conversion specifier

scanf("%d", &integer1); // read an integer

git add . or git add file name
git commit -m
git push

puts("Enter the number:"); - similar to print f put less options


%c for "

(" %c I can run %c\n", '"','"')

r%s - reminder

Integer division yeilds an integer result   5/3 is 2.5 but will give 2 even if its 2.99 it will be 2

7/4 evaluated to 1
Integer- onlt remainder operatior, %, yields the remainder after integer division
7%4 = 3 







Thursday, Notes

Exam next week, getting a pratice exam - theory and practice parts - download a software to prevent looking at anything else

 gcc rootes.c -lm

 - lm  means library math

 <math.h> to include math


If ... else statements

 if (booleanExpression) {

    statement(s) - for-the-true-case;

 }

 else{

    statement(s)-for-the-false-case;

 }

 %c for character

 char - character



 Even or odd number

 if(number% 2== 0){

    printf("This is an even number\n");

 }
 else{

    printf("This is an odd numebr\n");

 }



float, double, long double

%e or %E   - display a floating-point in exponential notation

%.3f  %.2f %.4f

! - not
&& - and
|| - or


Sentinel Controlled Loop

product = 3;
while (product <= 100){
   product = 3 * product;
   printf("%d", product);
} // end while

void print(void){

int c = 1;

while(c <= 10){

   printf("I love coding!);
   
   c = c + 1;

}
}

int i = 1;
int sum = 0;

while (i <= 10){

sum += i;

i += 1;

print("%d\n", sum);

}

++a - increment a by 1, then uses the new value in calculations
a++ - uses current value in the calculations then increases by 1
--b - decrements, change then uses new value
b-- - same value then change

x = 5
y = 6
z = -9
k = -18

int x = 1;
int sum = 0;

do{
   sum += x;
   x++;

} while(x <= 10);

for (initialization; conditionl; increment){
   statements;
}

for (unsighed in counter = 1; counter <= 10; ++counter){
   printf("%u or cl??", counter)
}

for(int i = 20; i >= -10; i -= 6){

printf("%d", i);

}

int i = 20;

do{

printf("%d", i);
i -= 6;

} while(i >= -10)


22 18 14 10 6   

Nested loops
- a loop can be nested inside another loop - consist of an outer loop and one or more inner loops - each time the outer loop is repeated, the inner loops are reentered and start anew

for (int i = 0; 1 < nRows; i++){
   for(int j = 0; j < nColumns; j++){

      printf("%c", '*');

   }
   puts("");

}

n = a rand () % b;
a is shifting value (which is equal to the first number in the desired range of consecutive integer) and b is the scaling factor (which is equal to the width of the desired range of consecutive integers)

rand () % 15 - 3  [0; 14] subtract 3  [ -3; 11]

rand () 31 - 7;

#include <stdlib.h>  rand()
#include <time.h>

srand(time(0));

< data type> * name = NULL; or = &name1;

printf("%d" *name);

void sp(int *a_ptr, int *b_ptr){

   int temp = *a_ptr;
   *a_ptr = *b_ptr;
   *b_ptr = temp;

}

array 0 to n - 1; n = number of elements
<data type> name [size];
int grade[10]  10 is 10 numbers 
printf("%d" grade[0]);

